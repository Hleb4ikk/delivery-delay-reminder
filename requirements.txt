Задачи:
    1.CRUD операции для добавления груза и этапов(высокий приоритет):
        1. Создать маршруты:
            + GET /posts - пагинация
            + GET /posts/:id
            + POST /posts
            + PATCH /posts/:id (убрать) обсудить с Александром
            + DELETE /posts/:id
        2. Создать валидацию данных для маршрутов POST и PUT
            + валидация через zod-схемы, созданы пайпы, ValidationException для ошибок валидации.
            + создан фильтр для обработки ValidationException.
    2.Проверка статуса по расписанию (cron)(высокий приоритет):
        - установить @nestjs/schedule и зарегистрировать ScheduleModule в AppModule
        - создать DelayedStageService для обработки логики
        - создать метод с декоратором @Cron(CronExpression.EVERY_10_MINUTES)
        - в методе:
            + получить все грузы
            + взять последний этап каждого груза
            + если разница между enteredAt и текущим временем > 12 часов → уведомить
        - лимит времени вынести в .env (например, STAGE_DELAY_HOURS = 12) (указывать рамки глобальные для одной стадии)
        - добавить логирование срабатываний cron-задачи

    3.Email-оповещение (drop me mail):
        - создать SMTP-подключение (через nodemailer или @nestjs-modules/mailer)
        - получить email-авторизацию:
            + токен или логин/пароль
            + настроить .env:
                SMTP_HOST=
                SMTP_PORT=
                SMTP_USER=
                SMTP_PASS=
        - создать MailService с методом sendDelayedStageAlert(to, cargoId, stageName, delayHours)
        - подключить шаблон письма (текст или HTML)
        - вызвать MailService из cron-задачи при обнаружении просроченного этапа
        - добавить логирование успешных и неудачных отправок
5 аккаунтов но одна система заказов(Последний приоритет)
Ниже(высокий приоритет):
логин
email уведомления (временные рамки для любого этапа)
actions в таблице

